{"message":"unresolved imports `tokio::codec`, `tokio::net::TcpStream`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":61,"byte_end":66,"line_start":5,"line_end":5,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"use tokio::{codec::{FramedWrite, LengthDelimitedCodec}, net::TcpStream};","highlight_start":13,"highlight_end":18}],"label":"could not find `codec` in `tokio`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":105,"byte_end":119,"line_start":5,"line_end":5,"column_start":57,"column_end":71,"is_primary":true,"text":[{"text":"use tokio::{codec::{FramedWrite, LengthDelimitedCodec}, net::TcpStream};","highlight_start":57,"highlight_end":71}],"label":"no `TcpStream` in `net`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `tokio::codec`, `tokio::net::TcpStream`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:5:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse tokio::{codec::{FramedWrite, LengthDelimitedCodec}, net::TcpStream};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `codec` in `tokio`\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `TcpStream` in `net`\u001b[0m\n\n"}
{"message":"unresolved import `tokio_serde_json`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":127,"byte_end":143,"line_start":7,"line_end":7,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use tokio_serde_json::WriteJson;","highlight_start":5,"highlight_end":21}],"label":"use of undeclared crate or module `tokio_serde_json`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is a crate or module with a similar name","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":127,"byte_end":143,"line_start":7,"line_end":7,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use tokio_serde_json::WriteJson;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":"tokio_serde","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `tokio_serde_json`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse tokio_serde_json::WriteJson;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `tokio_serde_json`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a crate or module with a similar name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse \u001b[0m\u001b[0m\u001b[38;5;10mtokio_serde\u001b[0m\u001b[0m::WriteJson;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `main` in `tokio`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":166,"byte_end":170,"line_start":9,"line_end":9,"column_start":10,"column_end":14,"is_primary":true,"text":[{"text":"#[tokio::main]","highlight_start":10,"highlight_end":14}],"label":"could not find `main` in `tokio`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `main` in `tokio`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:10\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[tokio::main]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `main` in `tokio`\u001b[0m\n\n"}
{"message":"type annotations needed","code":{"code":"E0283","explanation":"An implementation cannot be chosen unambiguously because of lack of information.\n\nErroneous code example:\n\n```compile_fail,E0283\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct Impl;\n\nimpl Generator for Impl {\n    fn create() -> u32 { 1 }\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let cont: u32 = Generator::create();\n    // error, impossible to choose one of Generator trait implementation\n    // Should it be Impl or AnotherImpl, maybe something else?\n}\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to use a concrete\ntype:\n\n```\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let gen1 = AnotherImpl::create();\n\n    // if there are multiple methods with same name (different traits)\n    let gen2 = <AnotherImpl as Generator>::create();\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":9532,"byte_end":9548,"line_start":278,"line_end":278,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":9,"highlight_end":25}],"label":"cannot infer type for type `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":6579,"byte_end":6601,"line_start":188,"line_end":188,"column_start":52,"column_end":74,"is_primary":false,"text":[{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":52,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":8429,"byte_end":8499,"line_start":234,"line_end":234,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":4913,"byte_end":4971,"line_start":148,"line_end":148,"column_start":9,"column_end":67,"is_primary":false,"text":[{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":6536,"byte_end":6615,"line_start":188,"line_end":188,"column_start":9,"column_end":88,"is_primary":false,"text":[{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":9,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":8429,"byte_end":8499,"line_start":234,"line_end":234,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":9292,"byte_end":9345,"line_start":270,"line_end":270,"column_start":13,"column_end":66,"is_primary":false,"text":[{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":13,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":1419,"byte_end":1444,"line_start":56,"line_end":56,"column_start":9,"column_end":34,"is_primary":false,"text":[{"text":"        json_internal!($($json)+)","highlight_start":9,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":571,"byte_end":699,"line_start":23,"line_end":30,"column_start":21,"column_end":7,"is_primary":false,"text":[{"text":"    serialized.send(json!({","highlight_start":21,"highlight_end":28},{"text":"      \"name\": \"John Doe\",","highlight_start":1,"highlight_end":26},{"text":"      \"age\": 43,","highlight_start":1,"highlight_end":17},{"text":"      \"phones\": [","highlight_start":1,"highlight_end":18},{"text":"        \"+44 1234567\",","highlight_start":1,"highlight_end":23},{"text":"        \"+44 2345678\"","highlight_start":1,"highlight_end":22},{"text":"      ]","highlight_start":1,"highlight_end":8},{"text":"    })).await.unwrap()","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"json!","def_site_span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":1292,"byte_end":1453,"line_start":53,"line_end":58,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json {","highlight_start":1,"highlight_end":20},{"text":"    // Hide distracting implementation details from the generated rustdoc.","highlight_start":1,"highlight_end":75},{"text":"    ($($json:tt)+) => {","highlight_start":1,"highlight_end":24},{"text":"        json_internal!($($json)+)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"multiple `impl`s satisfying `{integer}: serde::ser::Serialize` found in the `serde` crate:\n- impl serde::ser::Serialize for i128;\n- impl serde::ser::Serialize for i16;\n- impl serde::ser::Serialize for i32;\n- impl serde::ser::Serialize for i64;\nand 8 more","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `serde::ser::Serialize` for `&{integer}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `to_value`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/value/mod.rs","byte_start":27978,"byte_end":27987,"line_start":944,"line_end":944,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    T: Serialize,","highlight_start":8,"highlight_end":17}],"label":"required by this bound in `to_value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:23:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    serialized.send(json!({\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      \"name\": \"John Doe\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      \"age\": 43,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      \"phones\": [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      ]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    })).await.unwrap()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{integer}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `{integer}: serde::ser::Serialize` found in the `serde` crate:\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for i128;\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for i16;\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for i32;\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for i64;\u001b[0m\n\u001b[0m            and 8 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `serde::ser::Serialize` for `&{integer}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `to_value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/shixianglong/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.82/src/value/mod.rs:944:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m944\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    T: Serialize,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `to_value`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `json_internal` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unused import: `futures::prelude`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":4,"byte_end":20,"line_start":1,"line_end":1,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use futures::prelude::*;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `futures::prelude`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse futures::prelude::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0283, E0432, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0283, E0432, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0283`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0283`.\u001b[0m\n"}
